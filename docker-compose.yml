services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: shopping-list-db
    environment:
      POSTGRES_DB: shoppinglist
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d shoppinglist"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shopping-list-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: shopping-list-backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgres://user:password@db:5432/shoppinglist
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: shoppinglist
      DB_USER: user
      DB_PASSWORD: password
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - shopping-list-network

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: shopping-list-frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - shopping-list-network

volumes:
  postgres_data:

networks:
  shopping-list-network:
    driver: bridge
